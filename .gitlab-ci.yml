include:
  # Generic dev/feature deployments
  - local: /.gitlab-ci.features.yml
  # Generic front-end build:
  - local: /.gitlab-ci.build-frontend.yml
  # Generic composer build:
  - local: /.gitlab-ci.build-composer.yml
  # Generic cypress testing:
  - local: /.gitlab-ci.cypress.yml

variables:
  # Use these to define user@ip details for each destination server.
  # This way you wont have to worry about making changes in multiple
  # places
  SERVER_DETAILS_DEV: deployments@162.243.173.73
  SERVER_DETAILS_STG: user@ip
  SERVER_DETAILS_PRD: user@ip
  # Change this to digitalsurgeonsdev.com if you need to
  DEV_DOMAIN: digitalsurgeons.dev

deploy_prod:
  extends: .deploy
  script:
    - echo "Unimplemented!"; return 1
    # - rsync --copy-unsafe-links -rvzcSle --exclude-from '.rsyncignore' ./ $SERVER_DETAILS_PRD:/var/www/production/
  environment:
    name: production
    url: https://domain.com
  when: manual
  only:
    - master

deploy_stage:
  extends: .deploy
  script:
    - echo "Unimplemented!"; return 1
    # - rsync --copy-unsafe-links -rvzcSl --exclude-from '.rsyncignore' ./ $SERVER_DETAILS_STG:/var/www/staging/
  environment:
    name: staging
    url: https://stage.domain.com
  only:
    # Deploy from hotfix and release branches as well as master, so we
    # can test and make modifications on those branches before finishing
    # out a branch. This leads to fewer version bumps and less repo
    # noise.
    - /^(master|hotfix\/|release\/)/

# Dev and feature deployments are generic and included from the
# .gitlab-ci.features.yml. If you need you modify you can configure
# here, but be careful to copy the script contents from the included
# file if you're going to alter them, or use after_script
#
# Example:
# deploy_dev:
#   after_script:
#     - ssh ln -s /var/www/$CI_PROJECT_NAME/public/uploads /var/www/$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG/public/uploads

