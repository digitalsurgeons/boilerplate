/*
  They cover the different types of easing formulas.
  Customize as you wish at
  http://cubic-bezier.com/
*/
$linear         : cubic-bezier(0.250, 0.250, 0.750, 0.750) !default;
$ease           : cubic-bezier(0.250, 0.100, 0.250, 1.000) !default;
$ease-in        : cubic-bezier(0.420, 0.000, 1.000, 1.000) !default;
$ease-out       : cubic-bezier(0.000, 0.000, 0.580, 1.000) !default;
$ease-in-out    : cubic-bezier(0.420, 0.000, 0.580, 1.000) !default;

$easeInQuad     : cubic-bezier(0.550, 0.085, 0.680, 0.530) !default;
$easeInCubic    : cubic-bezier(0.550, 0.055, 0.675, 0.190) !default;
$easeInQuart    : cubic-bezier(0.895, 0.030, 0.685, 0.220) !default;
$easeInQuint    : cubic-bezier(0.755, 0.050, 0.855, 0.060) !default;
$easeInSine     : cubic-bezier(0.470, 0.000, 0.745, 0.715) !default;
$easeInExpo     : cubic-bezier(0.950, 0.050, 0.795, 0.035) !default;
$easeInCirc     : cubic-bezier(0.600, 0.040, 0.980, 0.335) !default;
$easeInBack     : cubic-bezier(0.600, -0.280, 0.735, 0.045) !default;

$easeOutQuad    :  cubic-bezier(0.250, 0.460, 0.450, 0.940) !default;
$easeOutCubic   :  cubic-bezier(0.215, 0.610, 0.355, 1.000) !default;
$easeOutQuart   :  cubic-bezier(0.165, 0.840, 0.440, 1.000) !default;
$easeOutQuint   :  cubic-bezier(0.230, 1.000, 0.320, 1.000) !default;
$easeOutSine    :  cubic-bezier(0.390, 0.575, 0.565, 1.000) !default;
$easeOutExpo    :  cubic-bezier(0.190, 1.000, 0.220, 1.000) !default;
$easeOutCirc    :  cubic-bezier(0.075, 0.820, 0.165, 1.000) !default;
$easeOutBack    :  cubic-bezier(0.175, 0.885, 0.320, 1.275) !default;

$easeInOutQuad  :  cubic-bezier(0.455, 0.030, 0.515, 0.955) !default;
$easeInOutCubic :  cubic-bezier(0.645, 0.045, 0.355, 1.000) !default;
$easeInOutQuart :  cubic-bezier(0.770, 0.000, 0.175, 1.000) !default;
$easeInOutQuint :  cubic-bezier(0.860, 0.000, 0.070, 1.000) !default;
$easeInOutSine  :  cubic-bezier(0.445, 0.050, 0.550, 0.950) !default;
$easeInOutExpo  :  cubic-bezier(1.000, 0.000, 0.000, 1.000) !default;
$easeInOutCirc  :  cubic-bezier(0.785, 0.135, 0.150, 0.860) !default;
$easeInOutBack  :  cubic-bezier(0.680, -0.550, 0.265, 1.550) !default;


/*
  DS's CSS3 Animation with @keyframes
  Browers aren't in agreement yet, so we need mixins to generate
  clean code. To aid with the construction we need variables.

  $duration     How long it animates for 1 cycle.
  $delay        How long to pause before starting. Default 0
  $function     Describes it's easing formula. Default "ease"
  $count        How many times does it loop. Default 1
  $fill-mode    Specifies if the effects of an animation are before the animation starts and after it ends.
  $visibility   Determines whether or not a transformed element is visible when it is not facing the screen.

*/

$animation-count: 1 !default;
$animation-duration: $transition;
$animation-delay: 0s !default;
$animation-easing: $easeOutQuad !default;
$animation-fill: both;
$animation-backface: hidden !default;

//use $animation-feel to set $animation-easing and $animation-duration
@if $animation-feel == "fluffy" {
  $animation-easing: cubic-bezier(.45,.06,.43,.98);
  $animation-duration: $animation-duration * 2 ;
} @else if $animation-feel == "rigid" {
  $animation-easing: cubic-bezier(.24,.03,.64,.93);
  $animation-duration: $animation-duration * .6 ;
}

@mixin count($count: 1) {
  -webkit-animation-iteration-count: $count;
     -moz-animation-iteration-count: $count;
      -ms-animation-iteration-count: $count;
       -o-animation-iteration-count: $count;
          animation-iteration-count: $count;
}

@mixin duration($duration: 1s) {
  -webkit-animation-duration: $duration;
     -moz-animation-duration: $duration;
      -ms-animation-duration: $duration;
       -o-animation-duration: $duration;
          animation-duration: $duration;
}

@mixin delay($delay: .2s) {
  -webkit-animation-delay: $delay;
     -moz-animation-delay: $delay;
      -ms-animation-delay: $delay;
       -o-animation-delay: $delay;
          animation-delay: $delay;
}

@mixin function($function: ease) {
  -webkit-animation-timing-function: $function;
     -moz-animation-timing-function: $function;
      -ms-animation-timing-function: $function;
       -o-animation-timing-function: $function;
          animation-timing-function: $function;
}

@mixin fill-mode($fill: both) {
  -webkit-animation-fill-mode: $fill;
     -moz-animation-fill-mode: $fill;
      -ms-animation-fill-mode: $fill;
       -o-animation-fill-mode: $fill;
          animation-fill-mode: $fill;
}

@mixin visibility($visibility: hidden) {
  -webkit-backface-visibility: $visibility;
     -moz-backface-visibility: $visibility;
      -ms-backface-visibility: $visibility;
       -o-backface-visibility: $visibility;
          backface-visibility: $visibility;
}

@mixin transform($property) {
  -webkit-transform: $property;
     -moz-transform: $property;
      -ms-transform: $property;
       -o-transform: $property;
          transform: $property;
}

@mixin transform-origin($transform-origin: center center) {
  -webkit-transform-origin: $transform-origin;
     -moz-transform-origin: $transform-origin;
      -ms-transform-origin: $transform-origin;
       -o-transform-origin: $transform-origin;
          transform-origin: $transform-origin;
}

@mixin transform-style($transform-style: flat) {
  -webkit-transform-style: $transform-style;
     -moz-transform-style: $transform-style;
       -o-transform-style: $transform-style;
          transform-style: $transform-style;
}

@mixin animation-name($animation-name) {
  -webkit-animation-name: $animation-name;
     -moz-animation-name: $animation-name;
      -ms-animation-name: $animation-name;
       -o-animation-name: $animation-name;
          animation-name: $animation-name;
}
